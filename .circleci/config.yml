defaults: &DEFAULTS
    working_directory: ~/18F/cg-dashboard
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      GODIST: go1.9.linux-amd64.tar.gz
      WS: ~/.go_workspace/src/github.com/18F/cg-dashboard
      CF_ORGANIZATION: cloud-gov
    docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init

version: 2
jobs:
  checkout_code:
    <<: *DEFAULTS
    steps:
    - checkout
    - save_cache:
        key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
        paths:
        - ~/18F/cg-dashboard

#    - run: sudo docker info >/dev/null 2>&1 || sudo service docker start

  setup_go:
    <<: *DEFAULTS
    steps:
    - restore_cache:
        key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
    - restore_cache:
        key: v1-go-{{ .Environment.GODIST }}
    - run: mkdir -p download
    - run: test -e download/$GODIST || curl -o download/$GODIST https://storage.googleapis.com/golang/$GODIST
    - run: sudo rm -rf /usr/local/go
    - run: sudo tar -C /usr/local -xzf download/$GODIST
#    - run: sudo apt-get update; sudo apt-get install libicu52
    - run: go version
    - run: go get -u github.com/golang/dep/cmd/dep
#    - run: rm -rf $WS
    - run: mkdir -p $(dirname $WS) && ln -s $(pwd) $WS
    - run: cd $WS && dep ensure
    - save_cache:
        key: v1-go-{{ .Environment.GODIST }}
        paths:
        - ~/.go_workspace
        - $WS
        - /usr/local/go
        - download


  setup_node:
    <<: *DEFAULTS
    steps:
    steps:
    - restore_cache:
        key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
    - restore_cache:
        key: v1-node-{{ checksum "package.json" }}
    - run: nvm install && nvm use && nvm alias default $(cat .nvmrc)
    - run: npm install
    - run: npm run test-selenium-install
    - run: wget https://chromedriver.storage.googleapis.com/2.33/chromedriver_linux64.zip
    - run: unzip chromedriver_linux64.zip
    - run: sudo cp chromedriver /usr/local/bin/chromedriver
    - save_cache:
        key: v1-node-{{ checksum "package.json" }}
        paths:
        - /usr/local/bin
        - node_modules
        - ./node_modules

  build:
    <<: *DEFAULTS
    steps:
    - restore_cache:
        key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
    - restore_cache:
        key: v1-node-{{ checksum "package.json" }}
    - restore_cache:
        key: v1-go-{{ .Environment.GODIST }}
    - run: nvm install && nvm use && nvm alias default $(cat .nvmrc)
    - run: cd $WS && go build
    - run: npm run build
    - save_cache:
        key: v1-build-{{ .Environment.CIRCLE_SHA1 }}
        paths:
        - $WS
        - ~/.go_workspace
        - node_modules
        - ./node_modules

  test:
    <<: *DEFAULTS
    steps:
    - restore_cache:
        key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
    - restore_cache:
        key: v1-node-{{ checksum "package.json" }}
    - restore_cache:
        key: v1-go-{{ .Environment.GODIST }}
    - restore_cache:
        key: v1-build-{{ .Environment.CIRCLE_SHA1 }}
    - run: if ! go get github.com/golang/tools/cmd/cover; then go get golang.org/x/tools/cmd/cover; fi
    # This is based on your 1.0 configuration file or project settings
    - run: export DISPLAY=:99.0
    - run: sh -e /etc/init.d/xvfb start || echo \"Unable to start virtual display.\"
    - run: sleep 5
    - run: cd $WS && npm test
    - run: NODE_ENV=prod npm run build
    - run: sleep 5
    - run: cd $WS && npm run test-performance || true
    - run: cd $WS && SKIP_DOCKER=1 ./codecheck.sh
    - store_test_results:
        path: $CIRCLE_TEST_REPORTS
    - store_artifacts:
        path: $CIRCLE_ARTIFACTS

#  deploy:
#    branch: [master, demo, pdb/circle-2]
#    owner: 18F
#    commands:
#    - run: NODE_ENV=prod npm run build-prod
#    - run: pip install --user ruamel.yaml
#    - run: export BUILD_INFO=build::$CIRCLE_BRANCH::$(date -u "+%Y-%m-%d-%H-%M-%S")::$CIRCLE_BUILD_NUM::$(deploy/npm-version.sh) && python deploy/vars-to-manifest.py
#    - run: cd $WS && ./deploy/circle_deploy.sh

workflows:
  version: 2
  validate_checkout:
    jobs:
        - checkout_code
        - setup_go
            requires: [checkout_code]
        - setup_node
            requires: [checkout_code]
#  build_and_test:
#    jobs:
#      - build
#      - test:
#          requires: [build]
