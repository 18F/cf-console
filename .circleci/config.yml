# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  test:
    working_directory: ~/18F/cg-dashboard
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      GODIST: go1.9.linux-amd64.tar.gz
      WS: /home/ubuntu/.go_workspace/src/github.com/18F/cg-dashboard
      CF_ORGANIZATION: cloud-gov
    docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init
    steps:
    - restore_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
    - run: if ! go get github.com/golang/tools/cmd/cover; then go get golang.org/x/tools/cmd/cover; fi
    # This is based on your 1.0 configuration file or project settings
    - run: export DISPLAY=:99.0
    - run: sh -e /etc/init.d/xvfb start || echo \"Unable to start virtual display.\"
    - run: sleep 5
    - run: cd $WS && npm test
    - run: NODE_ENV=prod npm run build
    - run: sleep 5
    - run: cd $WS && npm run test-performance || true
    - run: cd $WS && SKIP_DOCKER=1 ./codecheck.sh
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results

  build:
    working_directory: ~/18F/cg-dashboard
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      GODIST: go1.9.linux-amd64.tar.gz
      WS: /home/ubuntu/.go_workspace/src/github.com/18F/cg-dashboard
      CF_ORGANIZATION: cloud-gov
    docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init
    steps:
    - checkout
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    - run:
        working_directory: ~/18F/cg-dashboard
        command: 'sudo docker info >/dev/null 2>&1 || sudo service docker start; '
    - run:
        working_directory: ~/18F/cg-dashboard
        command: nvm install && nvm use && nvm alias default $(cat .nvmrc)
    - run:
        working_directory: ~/18F/cg-dashboard
        command: mkdir -p download
    - run:
        working_directory: ~/18F/cg-dashboard
        command: test -e download/$GODIST || curl -o download/$GODIST https://storage.googleapis.com/golang/$GODIST
    - run:
        working_directory: ~/18F/cg-dashboard
        command: sudo rm -rf /usr/local/go
    - run:
        working_directory: ~/18F/cg-dashboard
        command: sudo tar -C /usr/local -xzf download/$GODIST

    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-
    # This is based on your 1.0 configuration file or project settings
    - run: sudo apt-get update; sudo apt-get install libicu52
    - run: go version
    - run: go get -u github.com/golang/dep/cmd/dep
    - run: rm -rf $WS
    - run: mkdir -p $(dirname $WS) && ln -s $(pwd) $WS
    - run: cd $WS && dep ensure
    - run: npm install
    - run: npm run test-selenium-install
    # This is based on your 1.0 configuration file or project settings
    - run: cd $WS && go build
    - run: npm run build
    - run: wget https://chromedriver.storage.googleapis.com/2.33/chromedriver_linux64.zip
    - run: unzip chromedriver_linux64.zip
    - run: sudo cp chromedriver /usr/local/bin/chromedriver
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - vendor/bundle
        - /usr/local/
        - ~/virtualenvs
        - ~/.m2
        - ~/.ivy2
        - ~/.bundle
        - ~/.go_workspace
        - ~/.gradle
        - ~/.cache/bower
        # These cache paths were specified in the 1.0 config
        - node_modules
        - ./node_modules

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires: [build]
