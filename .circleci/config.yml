version: 2
jobs:
  build:
    environment:
      TEST_REPORTS: /tmp/test-reports
#      GODIST: go1.9.linux-amd64.tar.gz
      WS: ~/.go_workspace/src/github.com/18F/cg-dashboard
      CF_ORGANIZATION: cloud-gov

    parallelism: 1

    docker:
      - image: circleci/golang:1.9-node-browser

    working_directory: ~/18F/cg-dashboard

    steps:
      - checkout

      - run:
          command: echo 127.0.0.1 devhost | sudo tee -a /etc/hosts

      # The following run steps are pulled from old circle.yml
      # Machine:
      - run:
          command: |
            nvm install && nvm use && nvm alias default $(cat .nvmrc)
#            mkdir -p download
#            test -e download/$GODIST || curl -o download/$GODIST https://storage.googleapis.com/golang/$GODIST
#            sudo rm -rf /usr/local/go
#            sudo tar -C /usr/local -xzf download/$GODIST

      # - restore_cache:
      #     keys:
      #       - v1-cg-dashboard-{{ checksum "project.clj" }}
      #       - v1-cg-dashboard-

      # - run:
      #     environment:
      #       SSH_TARGET: "localhost"
      #       TEST_ENV: "linux"
      #     command: |
      #       set -xu
      #       mkdir -p ${TEST_REPORTS}
      #       run-tests.sh
      #       cp out/tests/*.xml ${TEST_REPORTS}

      # - run: |
      #     set -xu
      #     mkdir -p /tmp/artifacts
      #     create_jars.sh ${CIRCLE_BUILD_NUM}
      #     cp *.jar /tmp/artifacts

      # - save_cache:
      #     key: v1-cg-dashboard-{{ checksum "project.clj" }}
      #     paths:
      #       - ~/.m2

      # # Save artifacts
      # - store_artifacts:
      #     path: /tmp/artifacts
      #     destination: build

      # # Upload test results
      # - store_test_results:
      #     path: /tmp/test-reports

      # Dependencies:
      - run: |
          sudo apt-get update; sudo apt-get install libicu52
          go version
          go get -u github.com/golang/dep/cmd/dep
          rm -rf $WS
          mkdir -p $(dirname $WS) && ln -s $(pwd) $WS
          cd $WS && dep ensure
          npm install
          npm run test-selenium-install
          cd $WS && go build
          npm run build
          wget https://chromedriver.storage.googleapis.com/2.33/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo cp chromedriver /usr/local/bin/chromedriver
      # Test:
      # TODO: SKIP_DOCKER may not be needed anymore
      - run: |
            if ! go get github.com/golang/tools/cmd/cover; then go get golang.org/x/tools/cmd/cover; fi
            export DISPLAY=:99.0
            sh -e /etc/init.d/xvfb start || echo \"Unable to start virtual display.\"
            sleep 5 # give xvfb spin pu time
            cd $WS && npm test
            NODE_ENV=prod npm run build
            sleep 5
            cd $WS && npm run test-performance || true
            cd $WS && SKIP_DOCKER=1 ./codecheck.sh
      # Deploy:
      - run: |
            NODE_ENV=prod npm run build-prod
            pip install --user ruamel.yaml
            export BUILD_INFO=build::$CIRCLE_BRANCH::$(date -u "+%Y-%m-%d-%H-%M-%S")::$CIRCLE_BUILD_NUM::$(deploy/npm-version.sh) && python deploy/vars-to-manifest.py
            cd $WS && ./deploy/circle_deploy.sh


workflows:
  version: 2
  build-deploy:
    jobs:
      - build